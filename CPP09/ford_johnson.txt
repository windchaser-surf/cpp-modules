
    // sort pairs, leaving odd number if present
    // e.g.
    // 19 elements:
    //               23 10 10 97 42 32 40 84 29 26 66 96 57 13 46 30 91 48 11 <- odd
    //               ----- ----- ----- ----- ----- ----- ----- ----- -----
    // becomes ->    10 23 10 97 32 42 40 84 26 29 66 96 13 57 30 46 48 91 11

    // regular merge sort over the pairs, while only using the bigger element of the pairs for comparisons
    //
    //               10 23 10 97 32 42 40 84 26 29 66 96 13 57 30 46 48 91 11
    //               ----- ----- ----- ----- ----- ----- ----- ----- -----
    // becomes ->    10 23 26 29 32 42 30 46 13 57 40 84 48 91 66 96 10 97 11

    // main chain is the larger element from every pairs
    //
    //               10 23 26 29 32 42 30 46 13 57 40 84 48 91 66 96 10 97 11
    //               ----- ----- ----- ----- ----- ----- ----- ----- -----
    // main chain -> 23 29 42 46 57 84 91 96 97

    // pend is the smallest element from every pairs + odd element if present
    //
    //               10 23 26 29 32 42 30 46 13 57 40 84 48 91 66 96 10 97 11
    //               ----- ----- ----- ----- ----- ----- ----- ----- -----
    // pend       -> 10 26 32 30 13 40 48 66 10 11

    // insert pend elements into main chain following "jacobsthal" order
    // jacobsthal numbers: 1, 1, 3, 5, 11, 43, 683, ...
    //
    //                 (n1 will always be inserted first)
    // given:          n1, n2, n3, n4, n5, n6, n7, n8, n9, n10, n11, n12, n13, n14
    // the order is:   n3, n2,   n5, n4,   n11, n10, n9, n8, n7, n6,   n14, n13, n12
    //
    // the pattern follows jacobsthal(k) * 2, backwards in the array
    // jacobsthal numbers * 2: 2, 2, 6, 10, 22, 86, ...
    //
    // note that I am removing elements from pend in the drawings, but I am not doing
    // so in the actual code implementation to keep the pend indices from changing
    //
    // e.g.
    // main chain -> 23-29-42-46-57-84-91-96-97
    //               |  |  |  |  |  |  |  |  |
    // pend       -> 10 26 32 30 13 40 48 66 10 11
    // pend index:   0  1  2  3  4  5  6  7  8  9
    //
    //
    // always insert the first pend number
    // main chain -> 10-23-29-42-46-57-84-91-96-97
    //                     |  |  |  |  |  |  |  |
    // pend       ->       26 32 30 13 40 48 66 10 11
    // pend index:      0  1  2  3  4  5  6  7  8  9
    //
    // then, we need to follow the order described previously:
    // the first jacobsthal number * 2 = 2
    // lets say we have an index i and k as the current jacobsthal number starting at 1:
    // int i = 0; int k = 1;
    //
    // main chain -> 10-23-29-42-46-57-84-91-96-97
    //                     |  |  |  |  |  |  |  |
    // pend       ->      26 32 30 13 40 48 66 10 11
    //                  ^
    //                  i (the index 0 is valid even is the number is now in the main chain)
    // pend index:      0  1  2  3  4  5  6  7  8  9
    //
    // we now have to go forward by the kth jacobsthal number * 2, in this case: jacobsthal(1) * 2 = 2
    // lets also save i before increasing it to know where to stop; I will call it s
    // int s = i;
    // main chain -> 10-23-29-42-46-57-84-91-96-97
    //                     |  |  |  |  |  |  |  |
    // pend       ->       26 32 30 13 40 48 66 10 11
    //                  ^     ^
    //                  s     i
    // pend index:      0  1  2  3  4  5  6  7  8  9
    //
    // we then iterate backwards until we reach the previous i (aka s), while inserting pend[i] inside the main chain
    // the binary insertion has to be done with the low bound as 0 (the start of main chain) and the index - 1 of
    // the value paired with the pend value we are inserting
    //
    // the slice is represented with [] here
    // note that we can always assume that the number to insert should be inside this slice because the main chain
    // is always ordered and the number to insert will always be smaller than it's main chain counter part; thus
    // it is also smaller than every number to the right of it
    //
    // main chain -> [10-23-29]-42-46-57-84-91-96-97
    //                      |   |  |  |  |  |  |  |
    // pend       ->        26  32 30 13 40 48 66 10 11
    //                   ^      ^
    //                   s      i
    // pend index:       0  1   2  3  4  5  6  7  8  9
    //
    // so we insert 32 in the slice [10,23,29] with a binary insertion
    //
    // main chain -> 10-23-29-32-42-46-57-84-91-96-97
    //                       \      |  |  |  |  |  |
    // pend       ->          26    30 13 40 48 66 10 11
    //                     ^     ^
    //                     s     i
    // pend index:         0  1  2  3  4  5  6  7  8  9
    //
    // next we decrement i because we have not yet reached s
    //
    // main chain -> 10-23-29-32-42-46-57-84-91-96-97
    //                       \      |  |  |  |  |  |
    // pend       ->          26    30 13 40 48 66 10 11
    //                     ^  ^
    //                     s  i
    // pend index:         0  1  2  3  4  5  6  7  8  9
    //
    // insert 26 with the same logic
    //
    // main chain -> [10-23]-29-32-42-46-57-84-91-96-97
    //                        \       |  |  |  |  |  |
    // pend       ->           26     30 13 40 48 66 10 11
    //                     ^   ^
    //                     s   i
    // pend index:         0   1  2   3  4  5  6  7  8  9
    //
    // main chain -> 10-23-26-29-32-42-46-57-84-91-96-97
    //                                 |  |  |  |  |  |
    // pend       ->                   30 13 40 48 66 10 11
    //                     ^   ^
    //                     s   i
    // pend index:         0   1   2   3  4  5  6  7  8  9
    //
    // next when we decrement i again, we reach s; we now need a new jacosthal number (2nd): jacobsthal(2) * 2 = 2
    // before we move i, it has to be reset to where it was at the beginning of the iteration (i = 2 in this case)
    //
    // main chain -> 10-23-26-29-32-42-46-57-84-91-96-97
    //                                 |  |  |  |  |  |
    // pend       ->                   30 13 40 48 66 10 11
    //                     ^       ^
    //                     s       i
    // pend index:         0   1   2   3  4  5  6  7  8  9
    //
    // now move i forward again by jacobsthal(2) * 2, which is 2 again
    // and we also have to move s to where is i before moving it
    //
    // main chain -> 10-23-26-29-32-42-46-57-84-91-96-97
    //                                 |  |  |  |  |  |
    // pend       ->                   30 13 40 48 66 10 11
    //                             ^      ^
    //                             s      i
    // pend index:         0   1   2   3  4  5  6  7  8  9
    //
    // we now apply the same logic as before, note the binary insertion slice in each insertion
    //
    // main chain -> [10-23-26-29-32-42-46]-57-84-91-96-97
    //                                  |   |  |  |  |  |
    // pend       ->                    30  13 40 48 66 10 11
    //                               ^      ^
    //                               s      i
    // pend index:         0    1    2   3  4  5  6  7  8  9
    //
    // main chain -> 10-13-23-26-29-32-42-46-57-84-91-96-97
    //                                    |     |  |  |  |
    // pend       ->                      30    40 48 66 10 11
    //                               ^       ^
    //                               s       i
    // pend index:         0    1    2    3  4  5  6  7  8  9
    //
    // main chain -> [10-13-23-26-29-32-42]-46-57-84-91-96-97
    //                                      |     |  |  |  |
    // pend       ->                        30    40 48 66 10 11
    //                                 ^    ^
    //                                 s    i
    // pend index:         0     1     2    3  4  5  6  7  8  9
    //
    // main chain -> 10-13-23-26-29-30-32-42-46-57-84-91-96-97
    //                                             |  |  |  |
    // pend       ->                               40 48 66 10 11
    //                                 ^     ^
    //                                 s     i
    // pend index:         0     1     2     3  4  5  6  7  8  9
    //
    // reset i and move s up
    //
    // main chain -> 10-13-23-26-29-30-32-42-46-57-84-91-96-97
    //                                             |  |  |  |
    // pend       ->                               40 48 66 10 11
    //                                          ^
    //                                         si
    // pend index:         0     1     2     3  4  5  6  7  8  9
    //
    // the next jacobsthal number is now: jacobsthal(3) * 2 = 6
    // since we don't have 6 elements left to insert, we can move i forward by the number of elements left in pend
    // there are 5 numbers left here
    //
    // main chain -> 10-13-23-26-29-30-32-42-46-57-84-91-96-97
    //                                             |  |  |  |
    // pend       ->                               40 48 66 10 11
    //                                          ^              ^
    //                                          s              i
    // pend index:         0     1     2     3  4  5  6  7  8  9
    //
    // keep binary inserting like before until we inserted every numbers from pend
    //
    // main chain -> [10-13-23-26-29-30-32-42-46-57-84-91-96-97]
    //                                              |  |  |  |
    // pend       ->                                40 48 66 10 11
    //                                           ^              ^
    //                                           s              i
    // pend index:         0     1     2     3   4  5  6  7  8  9
    //
    // main chain -> 10-11-13-23-26-29-30-32-42-46-57-84-91-96-97
    //                                                |  |  |  |
    // pend       ->                                  40 48 66 10
    //                                           ^                ^
    //                                           s                i
    // pend index:         0     1     2     3   4    5  6  7  8  9
    //
    //
    // main chain -> [10-11-13-23-26-29-30-32-42-46-57-84-91-96]-97
    //                                                 |  |  |   |
    // pend       ->                                   40 48 66  10
    //                                            ^              ^
    //                                            s              i
    // pend index:         0     1     2     3    4    5  6  7   8  9
    //
    // main chain -> [10-10-11-13-23-26-29-30-32-42-46-57-84-91]-96-97
    //                                                    |  |   |
    // pend       ->                                      40 48  66
    //                                           ^               ^
    //                                           s               i
    // pend index:         0     1     2     3   4    5   6  7   8  9
    //
    // ...
    //
    // main chain -> 10-10-11-13-23-26-29-30-32-40-42-46-48-57-66-84-91-96-97
    // pend       ->
    //
    // and now we're done!

    // the first number of pend can always be inserted as the first number in the main chain.
    // it's always smaller than it's paired number